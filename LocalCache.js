// Generated by CoffeeScript 1.3.3
(function() {
  var LocalCache;

  LocalCache = (function() {

    LocalCache.meta = null;

    LocalCache.localStorage = null;

    function LocalCache(directoryForNodeJSCache, keyForMetaData) {
      var LocalStorage;
      this.directoryForNodeJSCache = directoryForNodeJSCache != null ? directoryForNodeJSCache : './local-storage-cache';
      this.keyForMetaData = keyForMetaData != null ? keyForMetaData : 'local-storage-cache-key-for-meta-data';
      /*
          @constructor
          @param {String} [directoryForNodeJSCache] This is not used if running in the browser
          @param {String} [keyForMetaData]
      */

      if (typeof localStorage !== "undefined" && localStorage !== null) {
        LocalCache.localStorage = localStorage;
      } else {
        LocalStorage = require('node-localstorage').LocalStorage;
        LocalCache.localStorage = new LocalStorage(this.directoryForNodeJSCache);
      }
      if (LocalCache.meta == null) {
        LocalCache.meta = this.getItem(this.keyForMetaData);
        if (LocalCache.meta == null) {
          LocalCache.meta = {};
        }
      }
    }

    LocalCache.prototype.setItem = function(key, value) {
      /*
          @method setItem
            Stores the value in the cache under the provided key. If the storing of the value will not fit in the cache size
            it will delete the Least Recently Updated item in the cache to make room for this one. Uses JSON.stringify to
            put the value into a string form for storage. This may not work great for all types so make sure your value is
            an Object and not a bare String or other type.
          @param {String} key
          @param {Object} value
      */

      var metaRow, mkey, mvalue, oldestKey, oldestTime, _ref, _ref1;
      while (true) {
        try {
          LocalCache.localStorage.setItem(key, JSON.stringify(value));
          break;
        } catch (e) {
          if (e.name === 'QUOTA_EXCEEDED_ERR') {
            oldestTime = new Date().getTime();
            oldestKey = null;
            _ref = LocalCache.meta;
            for (mkey in _ref) {
              mvalue = _ref[mkey];
              if (mvalue.lastUpdated < oldestTime) {
                oldestKey = mkey;
                oldestTime = mvalue.lastUpdated;
              }
            }
            this.removeItem(oldestKey);
          } else {
            throw e;
          }
        }
      }
      metaRow = {};
      metaRow.lastUpdated = new Date().getTime();
      LocalCache.meta[key] = metaRow;
      while (true) {
        try {
          LocalCache.localStorage.setItem(this.keyForMetaData, JSON.stringify(LocalCache.meta));
          break;
        } catch (e) {
          if (e.name === 'QUOTA_EXCEEDED_ERR') {
            oldestTime = new Date().getTime();
            oldestKey = null;
            _ref1 = LocalCache.meta;
            for (mkey in _ref1) {
              mvalue = _ref1[mkey];
              if (mvalue.lastUpdated < oldestTime) {
                oldestKey = mkey;
                oldestTime = mvalue.lastUpdated;
              }
            }
            this.removeItem(oldestKey);
          } else {
            throw e;
          }
        }
      }
      return this;
    };

    LocalCache.prototype.getItem = function(key) {
      /*
          @method getItem
            Returns the value at the provided key. Uses JSON.parse to get it back into Object form before returning.
          @param {String} key
      */

      var value;
      value = LocalCache.localStorage.getItem(key);
      if (value != null) {
        return JSON.parse(value);
      } else {
        return void 0;
      }
    };

    LocalCache.prototype.removeItem = function(key) {
      /*
          @method removeItem
            Removes the item from the cache.
          @param {String} key
      */
      LocalCache.localStorage.removeItem(key);
      delete LocalCache.meta[key];
      LocalCache.localStorage.setItem(this.keyForMetaData, JSON.stringify(LocalCache.meta));
      return this;
    };

    LocalCache.prototype.clear = function() {
      /*
          @method clear
            Deletes all members of the cache according to the meta value. Will not empty the entire localStorage if they were
            inserted by another cache or other code using localStorage. Clear the browser cache to remove all of those.
      */

      var key, metaRow, _ref;
      _ref = LocalCache.meta;
      for (key in _ref) {
        metaRow = _ref[key];
        LocalCache.localStorage.removeItem(key);
      }
      LocalCache.meta = {};
      LocalCache.localStorage.setItem(this.keyForMetaData, JSON.stringify(LocalCache.meta));
      return this;
    };

    return LocalCache;

  })();

  if (typeof exports !== 'undefined' && this.exports !== exports) {
    exports.LocalCache = LocalCache;
  } else {
    this.LocalCache = LocalCache;
  }

}).call(this);
